/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Colin
 */
public class Calculate extends javax.swing.JFrame {
    
    static double systemSize, systemCost, numOfPanels, panelOrientation, hoursOfSunlight, dailyPowerUsage, tariffRate, dailyGeneration,
                inverterEfficiency, panelEfficiency, annualSolarGeneration, dailySolarUsed, dailySolarExported,
                dailySavings, annualSavings, cumulativeSavings, breakEvenPoint, investmentReturn, daytimePowerUsage, feedInTariff, panEffLostRate,
                percentPowerUsage, additionalFees, tariffRateIncrease, FeedInTariffRate;
    static String systemLocation;
    private String[] args;
    
    static boolean isAllValid = true;
    static boolean isCostNeeded = false;
    
    static InputValidator val = new InputValidator();
    
    static String error = "<h2>Results</h2><p>No results were returned.</p><p>";
    static String confirmedLocationError = error
            + "Please ensure you have entered a valid system location, clicked <em>Confirm location</em> and selected from a list of matching locations.</p>";
    static String systemCostError = error
            + "Please ensure you have entered a valid system cost or left it blank (numbers only; no more than two decimal places).</p>";
    static String systemSizeError = error
            + "Please ensure you have selected or entered a valid system size (numbers only; no more than two decimal places; must be greater than zero).</p>";
    static String panelBankError = error
            + "Please ensure you have selected a number of panels, orientation and tilt angle for each panel bank.</p>";
    static String panelEfficiencyLossError = error
            + "Please ensure you have entered a valid average annual panel efficiency loss (numbers only; no more than two decimal places).</p>";
    static String inverterEfficiencyError = error
            + "Please ensure you have entered a valid inverter efficiency (numbers only; no more than 2 decimal places).</p>";
    static String replacementInverterError = error
            + "Please ensure you have specified whether or not you want to include the cost of a replacement inverter in your calculations.</p>";
    static String replacementCostError = error
            + "Please ensure you have entered a valid replacement inverter cost (numbers only; no more than two decimal places).</p>";
    static String hoursOfSunlightError = error
            + "Please ensure you have selected an average daily hours of sunlight.</p>";
    static String dailyPowerUsageError = error
            + "Please ensure you have entered a valid average daily power usage (numbers only; no more than two decimal places).</p>";
    static String daytimePowerUsageError = error
            + "Please ensure you have entered a valid average daytime power usage (numbers only; no more than two decimal places).</p>";
    static String powerUsageError = error
            + "Please ensure the average daytime power usage is less than or equal to the average daily power usage.</p>";
   static String tariffError = error
            + "Please ensure you have entered a valid tariff rate and average percentage of power usage for each tariff (numbers only; no more than two decimal places).</p>";
    static String tariffPercentageError = error
            + "Please ensure the sum of the average percentages of power usage equals 100%.</p>";
    static String tariffIncreaseError = error
            + "Please ensure you have entered a valid average annual tariff rate increase (numbers only; no more than two decimal places).</p>";
    static String feedinTariffError = error
            + "Please ensure you have entered a valid feed-in tariff rate or left it blank (numbers only; no more than two decimal places).</p>";
    static String interestRateError = error
            + "Please ensure you have entered a valid average annual interest rate for comparison or left it blank (numbers only; no more than two decimal places).</p>";
    static String additionalFeesError = error
            + "Please ensure you have entered a valid amount for additional fees.";
    
    static String results;

    /**
     * Creates new form Calculate
     */
    public Calculate() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculations Window");

        OutputTextArea.setColumns(20);
        OutputTextArea.setRows(5);
        jScrollPane1.setViewportView(OutputTextArea);

        jButton1.setText("Back to Main Window");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear Results");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save Results");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("This window displays the results of your calculations:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jButton1)
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        setDefaultCloseOperation(Calculate.DISPOSE_ON_CLOSE);
        SolarPowerGui.main(args);
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        setDefaultCloseOperation(Calculate.DISPOSE_ON_CLOSE);
        runCalculate();
    }                                        

    public static Double getSystemSize() {
        double systemSize = 0;
        Object systemSizeItem = SolarPowerGui.SystemSizeComboBox.getSelectedItem();
        
        if (systemSizeItem.equals("1 kW")) {
            systemSize = 1;
        } else if (systemSizeItem.equals("1.5 kW")) {
            systemSize = 1.5;
        } else if (systemSizeItem.equals("2 kW")) {
            systemSize = 2;
        } else if (systemSizeItem.equals("2.5 kW")) {
            systemSize = 2.5;
        } else if (systemSizeItem.equals("3 kW")) {
            systemSize = 3;
        } else if (systemSizeItem.equals("3.5 kW")) {
            systemSize = 3.5;
        } else if (systemSizeItem.equals("4 kW")) {
            systemSize = 4;
        } else if (systemSizeItem.equals("4.5 kW")) {
            systemSize = 4.5;
        } else if (systemSizeItem.equals("5 kW")) {
            systemSize = 5;
        } else if (systemSizeItem.equals("5.5 kW")) {
            systemSize = 5.5;
        } else if (systemSizeItem.equals("6 kW")) {
            systemSize = 6;
        } else if (systemSizeItem.equals("Custom")) {
            String SystemSize = SolarPowerGui.SystemSizeTextField.getText();
            boolean isNullOrEmpty = val.isNullOrEmpty(SystemSize);
            if (isNullOrEmpty = true) {                
                outputError(systemSizeError);
                isAllValid = false;
            }
            
            systemSize = Double.parseDouble(SystemSize);
            boolean isValid = val.isValidSystemSize(systemSize);
            if (isValid = true) {
                return systemSize;
            } else {
                outputError(systemSizeError);
                isAllValid = false;
            }
            
        }
        
        return systemSize;
    }
    
        public static Double getNoOfPanels() {
        double noOfpan = 0;
        Object noOfPanItem = SolarPowerGui.NoOfPanelsComboBox.getSelectedItem();
                
        if (noOfPanItem.equals("4")) {
            noOfpan = 4;
        } else if (noOfPanItem.equals("6")) {
            noOfpan = 6;
        } else if (noOfPanItem.equals("8")) {
            noOfpan = 8;
        } else if (noOfPanItem.equals("10")) {
            noOfpan = 10;
        } else if (noOfPanItem.equals("12")) {
            noOfpan = 12;
        } else if (noOfPanItem.equals("14")) {
            noOfpan = 14;
        } else if (noOfPanItem.equals("16")) {
            noOfpan = 16;
        } else if (noOfPanItem.equals("18")) {
            noOfpan = 18;
        } else if (noOfPanItem.equals("20")) {
            noOfpan = 20;
        } else if (noOfPanItem.equals("Custom")) {
            String noOfPanels = SolarPowerGui.noOfPanTextField.getText();
            boolean isNullOrEmpty = val.isNullOrEmpty(noOfPanels);
            if (isNullOrEmpty = true) {
                outputError(panelBankError);
                isAllValid = false;
            }
            
            noOfpan = Double.parseDouble(noOfPanels);
            boolean isValid = val.isValidNoOfPanel(noOfpan);
            if (isValid = true) {
                return noOfpan;
            } else {
                outputError(panelBankError);
                isAllValid = false;
            }
        }
        
        return noOfpan;
    }
        
    public static Double getPanOrientation() {
        double panOrientation = 0;
        Object panOrientationItem = SolarPowerGui.OrientationComboBox.getSelectedItem();
        
        if (panOrientationItem.equals("N (0°)")) {
            panOrientation = 0;
        } else if (panOrientationItem.equals("NNE (22.5°)")) {
            panOrientation = 22.5;
        } else if (panOrientationItem.equals("NE (45°)")) {
            panOrientation =45;
        } else if (panOrientationItem.equals("ENE (67.5°)")) {
            panOrientation = 67.5;
        } else if (panOrientationItem.equals("E (90°)")) {
            panOrientation = 90;
        } else if (panOrientationItem.equals("ESE (112.5°)")) {
            panOrientation = 112.5;
        } else if (panOrientationItem.equals("SE (135°)")) {
            panOrientation = 135;
        } else if (panOrientationItem.equals("SSE (157.5°)")) {
            panOrientation = 157.5;
        } else if (panOrientationItem.equals("S (180°)")) {
            panOrientation = 180;
        } else if (panOrientationItem.equals("SSW (202.5°)")) {
            panOrientation = 202.5;
        } else if (panOrientationItem.equals("SW (225°)")) {
            panOrientation = 225;
        } else if (panOrientationItem.equals("WSW (247.5°)")) {
            panOrientation = 247.5;
        } else if (panOrientationItem.equals("W (270°)")) {
            panOrientation = 270;
        } else if (panOrientationItem.equals("WNW (292.5°)")) {
            panOrientation = 292.5;
        } else if (panOrientationItem.equals("NW (315°)")) {
            panOrientation = 315;
        } else if (panOrientationItem.equals("NNW (337.5°)")) {
            panOrientation = 337.5;
        } else if (panOrientationItem.equals("Custom")) {
            String Orientation = SolarPowerGui.OrientationTextField.getText();
            boolean isNullOrEmpty = val.isNullOrEmpty(Orientation);
            if (isNullOrEmpty = true) {
                outputError(panelBankError);
                isAllValid = false;
            }
            
            panOrientation = Double.parseDouble(Orientation);
            boolean isValid = val.isValidPanOrientation(panOrientation);
            if (isValid = true) {
                return panOrientation;
            } else {
                outputError(panelBankError);
                isAllValid = false;
            }
        }
        
        return panOrientation;
    }
    
    public static Double getHoursOfSunlight() {
        double hoursOfSunlight = 0;
        Object hoursOfSunlightItem = SolarPowerGui.HoursOfSunlightComboBox.getSelectedItem();
        
        if (hoursOfSunlightItem.equals("0")) {
            hoursOfSunlight = 0;
        } else if (hoursOfSunlightItem.equals("1")) {
            hoursOfSunlight = 1;
        } else if (hoursOfSunlightItem.equals("2")) {
            hoursOfSunlight = 2;
        } else if (hoursOfSunlightItem.equals("3")) {
            hoursOfSunlight = 3;
        } else if (hoursOfSunlightItem.equals("4")) {
            hoursOfSunlight = 4;
        } else if (hoursOfSunlightItem.equals("5")) {
            hoursOfSunlight = 5;
        } else if (hoursOfSunlightItem.equals("6")) {
            hoursOfSunlight = 6;
        } else if (hoursOfSunlightItem.equals("7")) {
            hoursOfSunlight = 7;
        } else if (hoursOfSunlightItem.equals("8")) {
            hoursOfSunlight = 8;
        } else if (hoursOfSunlightItem.equals("9")) {
            hoursOfSunlight = 9;
        } else if (hoursOfSunlightItem.equals("10")) {
            hoursOfSunlight = 10;
        } else if (hoursOfSunlightItem.equals("11")) {
            hoursOfSunlight = 11;
        } else if (hoursOfSunlightItem.equals("12")) {
            hoursOfSunlight = 12;
        } else if (hoursOfSunlightItem.equals("13")) {
            hoursOfSunlight = 13;
        } else if (hoursOfSunlightItem.equals("14")) {
            hoursOfSunlight = 14;
        } else if (hoursOfSunlightItem.equals("15")) {
            hoursOfSunlight = 15;
        } else if (hoursOfSunlightItem.equals("16")) {
            hoursOfSunlight = 16;
        } else if (hoursOfSunlightItem.equals("17")) {
            hoursOfSunlight = 17;
        } else if (hoursOfSunlightItem.equals("18")) {
            hoursOfSunlight = 18;
        } else if (hoursOfSunlightItem.equals("19")) {
            hoursOfSunlight = 19;
        } else if (hoursOfSunlightItem.equals("20")) {
            hoursOfSunlight = 20;
        } else if (hoursOfSunlightItem.equals("21")) {
            hoursOfSunlight = 21;
        } else if (hoursOfSunlightItem.equals("22")) {
            hoursOfSunlight = 22;
        } else if (hoursOfSunlightItem.equals("23")) {
            hoursOfSunlight = 23;
        } else if (hoursOfSunlightItem.equals("24")) {
            hoursOfSunlight = 24;
        } else if (hoursOfSunlightItem.equals("Custom")) {
            String hoursSun = SolarPowerGui.HoursOfSunTextField.getText();
            boolean isNullOrEmpty = val.isNullOrEmpty(hoursSun);
            if (isNullOrEmpty = true) {
                outputError(hoursOfSunlightError);
                isAllValid = false;
            }
            
            hoursOfSunlight = Double.parseDouble(hoursSun);
            boolean isValid = val.isValidHoursOfSunlight(hoursOfSunlight);
            if (isValid = true) {
                return hoursOfSunlight;
            } else {
                outputError(hoursOfSunlightError);
                isAllValid = false;
            }
        }
        
        return hoursOfSunlight;
    }
    
    public static Double getSystemCost() {
        String sysCost = SolarPowerGui.SystemCostTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(sysCost);
        if (isNullOrEmpty = true) {
            outputError(systemCostError);
                isAllValid = false;
        }
        
        double cost = Double.parseDouble(sysCost);
        boolean isValid = val.isValidSystemCost(cost);
        if (isValid = true) {
            return cost;
        } else {
            outputError(systemCostError);
                isAllValid = false;
        }
        
        return cost;
    }
    
    public static String getSystemLocation() {
        String loc = SolarPowerGui.FormattedAddressLabel.getText(); 
        boolean isNullOrEmpty = val.isNullOrEmpty(loc);
        if (isNullOrEmpty = true) {
            outputError(confirmedLocationError);
                isAllValid = false;
        }
        return loc;
    }
    
    public static Double getDailyPowerUsage() {
        String dailyPow = SolarPowerGui.DailyPowerUsageTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(dailyPow);
        if (isNullOrEmpty = true) {
            outputError(dailyPowerUsageError);
                isAllValid = false;
        }
        
        double dailyPowUsage = Double.parseDouble(dailyPow);
        boolean isValid = val.isValidDailyPowerUsage(dailyPowUsage);
        if (isValid = true) {
            return dailyPowUsage;
        } else {
            outputError(dailyPowerUsageError);
                isAllValid = false;
        }
        
        return dailyPowUsage;
    }
    
    public static Double getTariffRate() {
        String tarifRate = SolarPowerGui.TariffRateTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(tarifRate);
        if (isNullOrEmpty = true) {
            outputError(tariffError);
                isAllValid = false;
        }
        
        double tarRate = Double.parseDouble(tarifRate);
        boolean isValid = val.isValidTariffRate(tarRate);
        if (isValid = true) {
            return tarRate;
        } else {
            outputError(tariffError);
                isAllValid = false;
        }
        
        return tarRate;
    }
    
    public static Double getInverterEfficiency() {
        String inverterEff = SolarPowerGui.inverterEfficiencyTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(inverterEff);
        if (isNullOrEmpty = true) {
            outputError(inverterEfficiencyError);
                isAllValid = false;
        }
        
        double invEff = Double.parseDouble(inverterEff);
         boolean isValid = val.isValidInverterEfficiency(invEff);
        if (isValid = true) {
            return invEff;
        } else {
            outputError(inverterEfficiencyError);
                isAllValid = false;
        }
        
        return invEff;
    }
    
    //////////////////////////////////////////////////////////////////
//    public static Double getPanelEfficiency() {
//        double panEff;
//        panEff = SolarCalculator.efficiencyCalc(panelOrientation);
//        return panEff;
//    }
    
    public static Double getPanelEffLossRate() {
        String PanelEffLoss = SolarPowerGui.PanEffLossRateTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(PanelEffLoss);
        if (isNullOrEmpty = true) {
            outputError(panelEfficiencyLossError);
                isAllValid = false;
        }
        
        double panEffLossRate = Double.parseDouble(PanelEffLoss);
        boolean isValid = val.isValidPanelEfficiencyLossRate(panEffLossRate);
        if (isValid = true) {
            return panEffLossRate;
        } else {
            outputError(panelEfficiencyLossError);
                isAllValid = false;
        }
        
        return panEffLossRate;
    }
    
    public static Double getInvReplacementCost() {
        String inverterRepCost = SolarPowerGui.InvReplacementCostTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(inverterRepCost);
        if (isNullOrEmpty = true) {
            outputError(replacementCostError);
                isAllValid = false;
        }
        
        double invRepCost = Double.parseDouble(SolarPowerGui.InvReplacementCostTextField.getText());
        boolean isValid = val.isValidInverterReplacementCost(invRepCost);
        if (isValid = true) {
            return invRepCost;
        } else {
            outputError(replacementCostError);
                isAllValid = false;
        }
        return invRepCost;        
    }
    
    public static Double getPercentPowerUsage() {
        String percentagePowUsage = SolarPowerGui.PercPowUsageTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(percentagePowUsage);
        if (isNullOrEmpty = true) {
            outputError(powerUsageError);
                isAllValid = false;
        }
        
        double percPowUsage = Double.parseDouble(percentagePowUsage);
        boolean isValid = val.isValidPercentagePowerUsage(percPowUsage);
        if (isValid = true) {
            return percPowUsage;
        } else {
            outputError(powerUsageError);
                isAllValid = false;
        }
        
        return percPowUsage;
    }
    
    public static Double getAdditionalFees() {
        String additionalFees = SolarPowerGui.addFeesTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(additionalFees);
        if (isNullOrEmpty = true) {
            outputError(additionalFeesError);
                isAllValid = false;
        }
        
        double addFees = Double.parseDouble(additionalFees);
        boolean isValid = val.isValidAdditionalFees(addFees);
        if (isValid = true) {
            return addFees;
        } else {
            outputError(additionalFeesError);
                isAllValid = false;
        }
        
        return addFees;
    }
    
    public static Double getTariffRateIncrease() {
        String tariffRateInc = SolarPowerGui.TariffRateIncTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(tariffRateInc);
        if (isNullOrEmpty = true) {
            outputError(tariffIncreaseError);
                isAllValid = false;
        }
        
        double tarrRateInc = Double.parseDouble(tariffRateInc);
        boolean isValid = val.isValidTariffRateIncrease(tarrRateInc);
        if (isValid = true) {
            return tarrRateInc;
        } else {
            outputError(tariffIncreaseError);
                isAllValid = false;
        }
        
        return tarrRateInc;
    }
    
    public static Double getFeedInTariffRate() {
        String feedInTariffRate = SolarPowerGui.FeedInTariffRateTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(feedInTariffRate);
        if (isNullOrEmpty = true) {
            outputError(feedinTariffError);
                isAllValid = false;
        }
        
        double feedInTarrRate = Double.parseDouble(feedInTariffRate);
        boolean isValid = val.isValidFeedInTariffRate(feedInTarrRate);
        if (isValid = true) {
            return feedInTarrRate;
        } else {
            outputError(feedinTariffError);
                isAllValid = false;
        }
        
        return feedInTarrRate;
    }
    
    public static Double getDaytimePowerUsage() {
        String dayTimePowerUsage = SolarPowerGui.DaytimePowUsageTextField.getText();
        boolean isNullOrEmpty = val.isNullOrEmpty(dayTimePowerUsage);
        if (isNullOrEmpty = true) {
            outputError(daytimePowerUsageError);
                isAllValid = false;
        }
        
        double daytimePowUsage = Double.parseDouble(dayTimePowerUsage);
        boolean isValid = val.isValidDaytimePowerUsage(daytimePowUsage);
        if (isValid = true) {
            return daytimePowUsage;
        } else {
            outputError(daytimePowerUsageError);
                isAllValid = false;
        }
        
        return daytimePowUsage;
    }
    
    public static void updateResults() {
        
        // Obtain all values necessary for Calculations
        systemSize = getSystemSize();
        systemCost = getSystemCost();
        numOfPanels = getNoOfPanels();
        panelOrientation = getPanOrientation();
        systemLocation = getSystemLocation();
        hoursOfSunlight = getHoursOfSunlight();
        dailyPowerUsage = getDailyPowerUsage();
        tariffRate = getTariffRate();
        inverterEfficiency = getInverterEfficiency();
        //panelEfficiency = getPanelEfficiency();
        panEffLostRate = getPanelEffLossRate();
        //invReplacementCost = getInvReplacementCost();
        percentPowerUsage = getPercentPowerUsage();
        additionalFees = getAdditionalFees();
        tariffRateIncrease = getTariffRateIncrease();
        FeedInTariffRate = getFeedInTariffRate();
        
        dailyGeneration = SolarCalculator.calculateDailyGenerationRound(systemSize, inverterEfficiency, hoursOfSunlight, panelOrientation, panelEfficiency);
        annualSolarGeneration = SolarCalculator.calculateAnnualGenerationRound(systemSize, inverterEfficiency, hoursOfSunlight, panelOrientation, panelEfficiency);
        dailySolarUsed = SolarCalculator.calcDailySolarUsed(daytimePowerUsage, hoursOfSunlight);
        dailySolarExported = SolarCalculator.calcDailySolarExported(dailyGeneration, dailySolarUsed);
        dailySavings = SolarCalculator.calcDailySavings(dailySolarUsed, tariffRate, dailySolarExported, feedInTariff);
        annualSavings = SolarCalculator.calcAnnualSavings(dailySavings);
        cumulativeSavings = SolarCalculator.calcCumulativeSavings(annualSavings);
        breakEvenPoint = SolarCalculator.calcBreakEvenPoint(systemCost, annualSavings);
        investmentReturn = SolarCalculator.calcInvestmentReturn(systemCost);
        
        if (isAllValid = true) {
      results = "Details of the system: " + "\n" + "\tSize: "
                + systemSize
                + " kWh"
                + "\n"
                + "\tCost: "
                + "$ "
                + systemCost
                + "\n"
                + "\tNumber of panels: "
                + numOfPanels
                + "\n"
                + "\tOrientation of the panels: "
                + panelOrientation
                + "° "
                + "\n\n"
                + "User defined information: "
                + "\n"
                + "\tSystem location: "
                + systemLocation
                + "\n"
                + "\tHours of sunlight: "
                + hoursOfSunlight
                + " per day"
                + "\n"
                + "\tElectricity usage of user: "
                + dailyPowerUsage
                + " kW per Day"
                + "\n"
                + "\tTariff rate: "
                + tariffRate
                + " c/kWh"
                + "\n\n"
                + "The daily electricity generation of the system is: "
                + dailyGeneration
                + "kWh\n"
                + "Annual power generation of the system: "
                + annualSolarGeneration
                + "kWh\n"
                + "Daily solar used: "
                + dailySolarUsed
                + "kWh\n"
                + "Daily solar exported: "
                + dailySolarExported
                + "kWh\n"
                + "Daily savings: $"
                + dailySavings
                + "\n"
                + "Annual savings: $"
                + annualSavings
                + "\n"
                + "Cumulative savings: $"
                + cumulativeSavings
                + "\n"
                + "You will break even after: "
                + breakEvenPoint
                + " years\n"
                + "The equivalent investment return after 25 years would be: $"
                + investmentReturn
                + "\n"
                + "----------------------------------------------------------------------------\n\n";
            
            OutputTextArea.append(results);
        } else {        
            OutputTextArea.append(results);
        }
    }
    
    public static void outputError(String error) {
        results = error;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void runCalculate() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculate().setVisible(true);
                    updateResults();
                
            }
        });
    }
    // Variables declaration - do not modify                     
    public static javax.swing.JTextArea OutputTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   
}