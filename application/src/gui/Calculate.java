/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

/**
 *
 * @author Colin
 */
public class Calculate extends javax.swing.JFrame {

    /**
     * Creates new form Calculate
     */
    public Calculate() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculations Window");

        OutputTextArea.setColumns(20);
        OutputTextArea.setRows(5);
        jScrollPane1.setViewportView(OutputTextArea);

        jButton1.setText("Back to Main Window");

        jButton2.setText("Clear Results");

        jButton3.setText("Save Results");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("This window displays the results of your calculations:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jButton1)
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static Double getSystemSize() {
        double systemSize = 0;
        Object systemSizeItem = SolarPowerGui.SystemSizeComboBox.getSelectedItem();
        
        if (systemSizeItem.equals("1 kW")) {
            systemSize = 1;
        } else if (systemSizeItem.equals("1.5 kW")) {
            systemSize = 1.5;
        } else if (systemSizeItem.equals("2 kW")) {
            systemSize = 2;
        } else if (systemSizeItem.equals("2.5 kW")) {
            systemSize = 2.5;
        } else if (systemSizeItem.equals("3 kW")) {
            systemSize = 3;
        } else if (systemSizeItem.equals("3.5 kW")) {
            systemSize = 3.5;
        } else if (systemSizeItem.equals("4 kW")) {
            systemSize = 4;
        } else if (systemSizeItem.equals("4.5 kW")) {
            systemSize = 4.5;
        } else if (systemSizeItem.equals("5 kW")) {
            systemSize = 5;
        } else if (systemSizeItem.equals("5.5 kW")) {
            systemSize = 5.5;
        } else if (systemSizeItem.equals("6 kW")) {
            systemSize = 6;
        } else if (systemSizeItem.equals("Custom")) {
            systemSize = Double.parseDouble(SolarPowerGui.SystemSizeTextField.getText());
        }
        
        return systemSize;
    }
    
        public static Double getNoOfPanels() {
        double noOfpan = 0;
        Object noOfPanItem = SolarPowerGui.NoOfPanelsComboBox.getSelectedItem();
                
        if (noOfPanItem.equals("4")) {
            noOfpan = 4;
        } else if (noOfPanItem.equals("6")) {
            noOfpan = 6;
        } else if (noOfPanItem.equals("8")) {
            noOfpan = 8;
        } else if (noOfPanItem.equals("10")) {
            noOfpan = 10;
        } else if (noOfPanItem.equals("12")) {
            noOfpan = 12;
        } else if (noOfPanItem.equals("14")) {
            noOfpan = 14;
        } else if (noOfPanItem.equals("16")) {
            noOfpan = 16;
        } else if (noOfPanItem.equals("18")) {
            noOfpan = 18;
        } else if (noOfPanItem.equals("20")) {
            noOfpan = 20;
        } else if (noOfPanItem.equals("Custom")) {
            noOfpan = Double.parseDouble(SolarPowerGui.noOfPanTextField.getText());
        }
        
        return noOfpan;
    }
        
    public static Double getPanOrientation() {
        double panOrientation = 0;
        Object panOrientationItem = SolarPowerGui.OrientationComboBox.getSelectedItem();
        
        if (panOrientationItem.equals("N (0°)")) {
            panOrientation = 0;
        } else if (panOrientationItem.equals("NNE (22.5°)")) {
            panOrientation = 22.5;
        } else if (panOrientationItem.equals("NE (45°)")) {
            panOrientation =45;
        } else if (panOrientationItem.equals("ENE (67.5°)")) {
            panOrientation = 67.5;
        } else if (panOrientationItem.equals("E (90°)")) {
            panOrientation = 90;
        } else if (panOrientationItem.equals("ESE (112.5°)")) {
            panOrientation = 112.5;
        } else if (panOrientationItem.equals("SE (135°)")) {
            panOrientation = 135;
        } else if (panOrientationItem.equals("SSE (157.5°)")) {
            panOrientation = 157.5;
        } else if (panOrientationItem.equals("S (180°)")) {
            panOrientation = 180;
        } else if (panOrientationItem.equals("SSW (202.5°)")) {
            panOrientation = 202.5;
        } else if (panOrientationItem.equals("SW (225°)")) {
            panOrientation = 225;
        } else if (panOrientationItem.equals("WSW (247.5°)")) {
            panOrientation = 247.5;
        } else if (panOrientationItem.equals("W (270°)")) {
            panOrientation = 270;
        } else if (panOrientationItem.equals("WNW (292.5°)")) {
            panOrientation = 292.5;
        } else if (panOrientationItem.equals("NW (315°)")) {
            panOrientation = 315;
        } else if (panOrientationItem.equals("NNW (337.5°)")) {
            panOrientation = 337.5;
        } else if (panOrientationItem.equals("Custom")) {
            panOrientation = Double.parseDouble(SolarPowerGui.OrientationTextField.getText());
        }
        
        return panOrientation;
    }
    
    public static Double getHoursOfSunlight() {
        double hoursOfSunlight = 0;
        Object hoursOfSunlightItem = SolarPowerGui.HoursOfSunlightComboBox.getSelectedItem();
        
        if (hoursOfSunlightItem.equals("0")) {
            hoursOfSunlight = 0;
        } else if (hoursOfSunlightItem.equals("1")) {
            hoursOfSunlight = 1;
        } else if (hoursOfSunlightItem.equals("2")) {
            hoursOfSunlight = 2;
        } else if (hoursOfSunlightItem.equals("3")) {
            hoursOfSunlight = 3;
        } else if (hoursOfSunlightItem.equals("4")) {
            hoursOfSunlight = 4;
        } else if (hoursOfSunlightItem.equals("5")) {
            hoursOfSunlight = 5;
        } else if (hoursOfSunlightItem.equals("6")) {
            hoursOfSunlight = 6;
        } else if (hoursOfSunlightItem.equals("7")) {
            hoursOfSunlight = 7;
        } else if (hoursOfSunlightItem.equals("8")) {
            hoursOfSunlight = 8;
        } else if (hoursOfSunlightItem.equals("9")) {
            hoursOfSunlight = 9;
        } else if (hoursOfSunlightItem.equals("10")) {
            hoursOfSunlight = 10;
        } else if (hoursOfSunlightItem.equals("11")) {
            hoursOfSunlight = 11;
        } else if (hoursOfSunlightItem.equals("12")) {
            hoursOfSunlight = 12;
        } else if (hoursOfSunlightItem.equals("13")) {
            hoursOfSunlight = 13;
        } else if (hoursOfSunlightItem.equals("14")) {
            hoursOfSunlight = 14;
        } else if (hoursOfSunlightItem.equals("15")) {
            hoursOfSunlight = 15;
        } else if (hoursOfSunlightItem.equals("16")) {
            hoursOfSunlight = 16;
        } else if (hoursOfSunlightItem.equals("17")) {
            hoursOfSunlight = 17;
        } else if (hoursOfSunlightItem.equals("18")) {
            hoursOfSunlight = 18;
        } else if (hoursOfSunlightItem.equals("19")) {
            hoursOfSunlight = 19;
        } else if (hoursOfSunlightItem.equals("20")) {
            hoursOfSunlight = 20;
        } else if (hoursOfSunlightItem.equals("21")) {
            hoursOfSunlight = 21;
        } else if (hoursOfSunlightItem.equals("22")) {
            hoursOfSunlight = 22;
        } else if (hoursOfSunlightItem.equals("23")) {
            hoursOfSunlight = 23;
        } else if (hoursOfSunlightItem.equals("24")) {
            hoursOfSunlight = 24;
        }
        
        return hoursOfSunlight;
    }
    
    public static void updateResults() {
        double systemSize, systemCost, numOfPanels, panelOrientation, hoursOfSunlight, dailyPowerUsage, tariffRate, dailyGeneration,
                inverterEfficiency, panelEfficiency;
        String systemLocation;
        
        systemSize = getSystemSize();
        systemCost = Double.parseDouble(SolarPowerGui.SystemCostTextField.getText());
        numOfPanels = getNoOfPanels();
        panelOrientation = getPanOrientation();
        systemLocation = SolarPowerGui.FormattedAddressLabel.getText();
        hoursOfSunlight = getHoursOfSunlight();
        dailyPowerUsage = Double.parseDouble(SolarPowerGui.DailyPowerUsageTextField.getText());
        tariffRate = Double.parseDouble(SolarPowerGui.TariffRateTextField.getText());
        inverterEfficiency = Double.parseDouble(SolarPowerGui.inverterEfficiencyTextField.getText());
        panelEfficiency = SolarCalculator.efficiencyCalc(panelOrientation);
        
        dailyGeneration = SolarCalculator.calculateDailyGenerationRound(systemSize, inverterEfficiency, hoursOfSunlight, panelOrientation, panelEfficiency);
        
        String content = "Details of the system: " + "\n" + "\tSize: "
                + systemSize
                + " kWh"
                + "\n"
                + "\tCost: "
                + "$ "
                + systemCost
                + "\n"
                + "\tNumber of panels: "
                + numOfPanels
                + "\n"
                + "\tOrientation of the panels: "
                + panelOrientation
                + "° "
                + "\n\n"
                + "User defined information: "
                + "\n"
                + "\tSystem location: "
                + systemLocation
                + "\n"
                + "\tHours of sunlight: "
                + hoursOfSunlight
                + " per day"
                + "\n"
                + "\tElectricity usage of user: "
                + dailyPowerUsage
                + " kW per Day"
                + "\n"
                + "\tTariff rate: "
                + tariffRate
                + " c/kWh"
                + "\n\n"
                + "The daily electricity generation of the system is: "
                + dailyGeneration
                + " kW"
                + "\n"
                + "----------------------------------------------------------------------------\n\n";
        
        OutputTextArea.append(content);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void runCalculate() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculate().setVisible(true);
                updateResults();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea OutputTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
